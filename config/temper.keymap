/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define Base 0
#define NAV_NUM 1
#define SYM 2
#define FUN 3

&sk { quick-release; };

&lt {
    flavor = "hold-preferred";
    quick-tap-ms = <180>;
};

/ {
    behaviors {
        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <170>;
            tapping-term-ms = <190>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 20 21 22 23 24 14 30 31 32 33 34 35 25 15 5 6 16 26 27 17 7 8 18 28 29 19 9>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 10 20 21 1 11 12 2 3 4 24 14 13 23 22 30 31 32 33 34 35 25 26 28 27 29 9 8 7 6 5 15>;
        };

        mo_tog: mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 4>;
            timeout-ms = <30>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <6 5>;
            timeout-ms = <30>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 14>;
            timeout-ms = <30>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 15>;
            timeout-ms = <30>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
            timeout-ms = <35>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 25>;
            timeout-ms = <35>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <3 14>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <15 5>;
            timeout-ms = <30>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            timeout-ms = <30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            timeout-ms = <30>;
        };

        back {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            timeout-ms = <30>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <7 8>;
            timeout-ms = <30>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 22>;
            timeout-ms = <30>;
            layers = <0 7>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            timeout-ms = <30>;
            layers = <0 7>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <15 6>;
        };

        col-qwe {
            bindings = <&tog 7>;
            key-positions = <0 9>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <14 15>;
            layers = <6 2 3 6>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <24 25>;
            layers = <6 2 3 6>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <20 21>;
            layers = <7>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <0 7>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
            layers = <0>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <10 11>;
        };

        qwe-col {
            bindings = <&mo 0>;
            key-positions = <0 9>;
            layers = <7>;
        };
    };

    macros {
        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "PARENTHESES";
        };

        bracket: bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKET";
        };

        apostrophe: apostrophe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT>;
            label = "APOSTROPHE";
        };

        quotation: quotation {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp LEFT>;
            label = "QUOTATION";
        };

        brace: brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RBRC &kp LEFT>;
            label = "BRACKET";
        };

        than: than {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp LEFT &kp GT>;
            label = "THAN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Colemak-DH {
            label = "Colemak-DH";
            display-name = "Base";
            bindings = <
  &kp Q              &kp W            &kp F            &kp P         &kp B          &kp J        &kp L            &kp U                 &kp Y        &kp SINGLE_QUOTE
  &hml LEFT_SHIFT A  &hml LEFT_GUI R  &hml LEFT_ALT S  &hml LCTRL T  &kp G          &kp M        &hmr RCTRL N     &hmr LS(RIGHT_ALT) E  &hmr RGUI I  &hmr RIGHT_SHIFT O
  &kp Z              &kp X            &kp C            &kp D         &kp V          &kp K        &kp H            &kp COMMA             &kp DOT      &kp FSLH
                                      &lt 3 ESCAPE     &lt 1 SPACE   &lt 2 SPACE    &lt 5 ENTER  &lt 1 BACKSPACE  &lt 6 DEL
            >;
        };

        num-sys {
            bindings = <
  &kp EXCLAMATION           &kp AT_SIGN             &kp HASH                &kp DOLLAR           &kp PERCENT    &kp CARET   &kp AMPERSAND                &kp ASTERISK             &kp LEFT_PARENTHESIS     &kp RIGHT_PARENTHESIS
  &hml LEFT_SHIFT NUMBER_1  &hml LEFT_GUI NUMBER_2  &hml LEFT_ALT NUMBER_3  &hml LCTRL NUMBER_4  &kp N5         &kp N6      &hmr RIGHT_CONTROL NUMBER_7  &hmr RIGHT_ALT ASTERISK  &hmr RIGHT_GUI NUMBER_9  &hmr RIGHT_SHIFT NUMBER_0
  &kp HOME                  &kp END                 &kp PG_UP               &kp PAGE_DOWN        &bt BT_NXT     &bt BT_PRV  &kp LEFT                     &kp RIGHT                &kp UP                   &kp DOWN
                                                    &trans                  &trans               &trans         &trans      &trans                       &trans
            >;

            label = "num-sys";
        };

        numpad {
            display-name = "NUM";
            label = "Numpad";
            bindings = <
  &none           &none         &none         &none      &bracket        &kp LEFT_BRACKET  &kp N7        &kp N8        &kp N9        &kp RIGHT_BRACKET
  &kp LEFT_SHIFT  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &parentheses    &kp EQUAL         &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp SEMI
  &kp LC(Z)       &kp LC(X)     &kp LC(C)     &kp LC(V)  &brace          &kp BACKSLASH     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp GRAVE
                                &none         &trans     &none           &kp MINUS         &kp N0        &kp PERIOD
            >;
        };

        sym {
            label = "sym";
            display-name = "NAV";
            bindings = <
  &none           &none         &none         &none      &none           &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE
  &kp LEFT_SHIFT  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &caps_word      &kp PLUS        &kp DOLLAR       &kp PERCENT   &kp CARET             &kp COLON
  &kp LC(Z)       &kp LC(X)     &kp LC(C)     &kp LC(V)  &kp CAPSLOCK    &kp PIPE        &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp TILDE
                                &none         &none      &trans          &kp UNDERSCORE  &parentheses     &than
            >;
        };

        fun {
            bindings = <
  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp SYSREQ      &kp F7  &kp F8  &kp F9  &kp F12
  &kp LEFT_SHIFT  &kp LEFT_GUI    &kp LEFT_ALT  &kp LCTRL     &out OUT_TOG    &kp SCROLLLOCK  &kp F4  &kp F5  &kp F6  &kp F11
  &bt BT_CLR      &bt BT_CLR_ALL  &trans        &trans        &trans          &kp C_PAUSE     &kp F1  &kp F2  &kp F3  &kp F10
                                  &trans        &trans        &trans          &trans          &trans  &mo 7
            >;

            display-name = "FUN";
            label = "FUN";
        };

        Nav {
            bindings = <
  &kp PG_UP  &kp HOME   &kp UP     &kp END    &kp ESC       &none   &mkp LCLK  &mkp MCLK      &mkp RCLK      &kp BACKSPACE
  &kp PG_DN  &kp LEFT   &kp DOWN   &kp RIGHT  &caps_word    &none   &kp RCTRL  &kp RIGHT_ALT  &kp RIGHT_GUI  &kp RIGHT_SHIFT
  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)     &none   &none      &none          &none          &kp DELETE
                        &trans     &trans     &trans        &trans  &trans     &trans
            >;

            label = "Nav";
        };

        media {
            bindings = <
  &trans  &none           &kp C_VOLUME_UP    &none             &none         &trans  &trans  &trans  &trans  &trans
  &trans  &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_NEXT        &none         &trans  &trans  &trans  &trans  &trans
  &trans  &trans          &trans             &trans            &none         &trans  &trans  &trans  &trans  &trans
                          &kp C_MUTE         &kp C_PLAY_PAUSE  &kp C_STOP    &trans  &trans  &trans
            >;

            label = "media";
        };

        qwerty {
            bindings = <
  &kp Q  &kp W  &kp E      &kp R      &kp T      &kp Y   &kp U   &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D      &kp F      &kp G      &kp H   &kp J   &kp K      &kp L    &kp SEMICOLON
  &kp Z  &kp X  &kp C      &kp V      &kp B      &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH
                &kp LCTRL  &kp SPACE  &kp TAB    &trans  &trans  &trans
            >;

            label = "QWERTY";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function {
            if-layers = <2 5>;
            then-layer = <4>;
        };
    };
};
