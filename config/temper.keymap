/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define Base 0
#define NAV_NUM 1
#define SYM 2
#define FUN 3

&sk { quick-release; };

&lt {
    flavor = "hold-preferred";
    quick-tap-ms = <180>;
};

/ {
    behaviors {
        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <170>;
            tapping-term-ms = <190>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 20 21 22 23 24 14 30 31 32 33 34 35 25 15 5 6 16 26 27 17 7 8 18 28 29 19 9>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 10 20 21 1 11 12 2 3 4 24 14 13 23 22 30 31 32 33 34 35 25 26 28 27 29 9 8 7 6 5 15>;
        };

        mo_tog: mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 4>;
            timeout-ms = <30>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <6 5>;
            timeout-ms = <30>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 14>;
            timeout-ms = <30>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 15>;
            timeout-ms = <30>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
            timeout-ms = <35>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 25>;
            timeout-ms = <35>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <3 14>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <15 5>;
            timeout-ms = <30>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            timeout-ms = <30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            timeout-ms = <30>;
        };

        back {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
            timeout-ms = <30>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <28 29>;
            timeout-ms = <30>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <21 22>;
            timeout-ms = <30>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <22 23>;
            timeout-ms = <30>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <15 6>;
        };

        qwe-col {
            bindings = <&tog 4>;
            key-positions = <0 9>;
            layers = <4 0>;
        };

        close {
            bindings = <&kp LA(F4)>;
            key-positions = <8 9>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <14 15>;
            layers = <0 1 2 3 4>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <24 25>;
            layers = <0 1 3 2 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "Base";
            display-name = "Base";
            bindings = <
  &kp Q            &kp W            &kp F                &kp P              &kp B              &kp J            &kp L               &kp U                 &kp Y             &kp SEMI
  &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LEFT_CONTROL S  &hml LEFT_SHIFT T  &kp G              &kp M            &hml RIGHT_SHIFT N  &hml RIGHT_CONTROL E  &hml RIGHT_ALT I  &hml RIGHT_GUI O
  &kp Z            &kp X            &kp C                &kp D              &kp V              &kp K            &kp H               &kp COMMA             &kp DOT           &kp FSLH
                                    &kp CAPS             &lt 1 BACKSPACE    &mt LCTRL SPACE    &mt RCTRL SPACE  &lt 2 ENTER         &caps_word
            >;
        };

        num {
            display-name = "NUM";
            label = "NUM";
            bindings = <
  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6     &kp N7     &kp N8  &kp N9  &kp N0
  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &kp MINUS  &kp EQUAL  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans     &trans     &trans
            >;
        };

        nav {
            label = "NAV";
            display-name = "NAV";
            bindings = <
  &kp LEFT  &kp UP  &kp DOWN        &kp RIGHT         &kp ESC                 &kp DELETE             &kp PG_UP          &kp HOME         &kp END  &kp PAGE_DOWN
  &trans    &trans  &trans          &trans            &kp TAB                 &trans                 &trans             &trans           &trans   &kp SINGLE_QUOTE
  &trans    &trans  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &trans   &kp BACKSLASH
                    &trans          &trans            &trans                  &trans                 &trans             &trans
            >;
        };

        fun {
            bindings = <
  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5            &kp F6           &kp F7      &kp F8  &kp F9  &kp F10
  &kp F11       &kp F12       &trans        &bt BT_CLR    &bt BT_CLR_ALL    &kp C_VOLUME_UP  &kp K_MUTE  &trans  &trans  &out OUT_TOG
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &kp C_VOL_DN     &trans      &trans  &trans  &trans
                              &trans        &trans        &trans            &trans           &trans      &trans
            >;

            display-name = "FUN";
            label = "FUN";
        };

        qwerty {
            bindings = <
  &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI
  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH
                &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "QWERTY";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
